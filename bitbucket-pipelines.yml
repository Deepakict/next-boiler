#  Template React Deploy

#  This template allows you to deploy your React app to an AWS S3 bucket and invalidate the old AWS Cloudfront distribution.
#  The workflow allows running tests, code linting and security scans on feature branches (as well as master).
#  The react app will be validated, deployed to S3 and trigger an AWS Cloudfront distribution invalidation to refresh the CDN caches after the code is merged to master.

# Prerequisites: $AWS_ACCESS_KEY_ID, $AWS_SECRET_ACCESS_KEY setup in the Deployment variables.
# For advanced cases, please, follow examples from the pipe's:
# README https://bitbucket.org/atlassian/aws-s3-deploy/src/master/README.md
# README https://bitbucket.org/atlassian/aws-cloudfront-invalidate/src/master/README.md

image: node:16

# Workflow Configuration

pipelines:
  default:
    - parallel:
        - step:
            name: Delete Cache if Changes in the Build Dependencies
            script:
              - pipe: atlassian/bitbucket-clear-cache:3.3.0
                variables:
                  BITBUCKET_ACCESS_TOKEN: $BITBUCKET_ACCESS_TOKEN
                  CACHES: ["node"]
            condition:
              changesets:
                includePaths:
                  - package.json
        - step:
            name: Build and Test
            caches:
              - node
            script:
              - npm install
  branches:
    dev:
      - parallel:
        - step:
            name: Delete Cache if Changes in the Build Dependencies
            script:
              - pipe: atlassian/bitbucket-clear-cache:3.3.0
                variables:
                  BITBUCKET_ACCESS_TOKEN: $BITBUCKET_ACCESS_TOKEN
                  CACHES: ["node"]
            condition:
              changesets:
                includePaths:
                  - package.json
        - step:
            name: Build and Test
            caches:
              - node
            script:
              - npm install
              - npm run build-local
            artifacts:
              - build/**
        - step:
            name: Security Scan
            script:
              - pipe: atlassian/git-secrets-scan:1.2.1
      - step:
          name: Deploy to Development
          deployment: Development
          # trigger: manual
          clone:
            enabled: false
          script:
            # sync your files to S3
            - pipe: atlassian/aws-s3-deploy:1.2.0
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                S3_BUCKET: 'dev.raceinstitute.in'
                LOCAL_PATH: 'build'
    staging:
      - parallel:
        - step:
            name: Build and Test
            caches:
              - node
            script:
              - npm install
              - npm run build-staging
            artifacts:
              - build/**
        - step:
            name: Security Scan
            script:
              - pipe: atlassian/git-secrets-scan:1.2.1
      - step:
          name: Deploy to Staging
          deployment: Staging
          # trigger: manual
          clone:
            enabled: false
          script:
            # sync your files to S3
            - pipe: atlassian/aws-s3-deploy:1.2.0
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                S3_BUCKET: 'staging.raceinstitute.in'
                LOCAL_PATH: 'build'